Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> E1
Rule 1     E1 -> E1 AND E2
Rule 2     E1 -> E2 PLUS_DESCENDANTS
Rule 3     E1 -> E2 ONLY_FIRST
Rule 4     E1 -> E2
Rule 5     E2 -> E2 OR E3
Rule 6     E2 -> E3
Rule 7     E3 -> NOT E3
Rule 8     E3 -> E4
Rule 9     E3 -> LPAREN E1 RPAREN
Rule 10    E4 -> TAG
Rule 11    E4 -> words
Rule 12    E4 -> argument operator words
Rule 13    argument -> TAG
Rule 14    argument -> PROJECT
Rule 15    argument -> TYPE
Rule 16    argument -> UNIQUEID
Rule 17    operator -> EQ
Rule 18    operator -> NEQ
Rule 19    operator -> GEQ
Rule 20    operator -> LEQ
Rule 21    operator -> LE
Rule 22    operator -> GE
Rule 23    operator -> IN
Rule 24    operator -> CONTAINS
Rule 25    operator -> MATCHES
Rule 26    words -> TEXT words
Rule 27    words -> <empty>

Terminals, with rules where they appear

AND                  : 1
CONTAINS             : 24
EQ                   : 17
GE                   : 22
GEQ                  : 19
IN                   : 23
LE                   : 21
LEQ                  : 20
LPAREN               : 9
MATCHES              : 25
NEQ                  : 18
NOT                  : 7
ONLY_FIRST           : 3
OR                   : 5
PLUS_DESCENDANTS     : 2
PROJECT              : 14
RPAREN               : 9
TAG                  : 10 13
TEXT                 : 26
TYPE                 : 15
UNIQUEID             : 16
error                : 

Nonterminals, with rules where they appear

E1                   : 1 9 0
E2                   : 1 2 3 4 5
E3                   : 5 6 7
E4                   : 8
argument             : 12
operator             : 12
words                : 11 12 26

Parsing method: LALR

state 0

    (0) S' -> . E1
    (1) E1 -> . E1 AND E2
    (2) E1 -> . E2 PLUS_DESCENDANTS
    (3) E1 -> . E2 ONLY_FIRST
    (4) E1 -> . E2
    (5) E2 -> . E2 OR E3
    (6) E2 -> . E3
    (7) E3 -> . NOT E3
    (8) E3 -> . E4
    (9) E3 -> . LPAREN E1 RPAREN
    (10) E4 -> . TAG
    (11) E4 -> . words
    (12) E4 -> . argument operator words
    (26) words -> . TEXT words
    (27) words -> .
    (13) argument -> . TAG
    (14) argument -> . PROJECT
    (15) argument -> . TYPE
    (16) argument -> . UNIQUEID

    NOT             shift and go to state 9
    LPAREN          shift and go to state 7
    TAG             shift and go to state 6
    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    PROJECT         shift and go to state 5
    TYPE            shift and go to state 2
    UNIQUEID        shift and go to state 8

    argument                       shift and go to state 4
    words                          shift and go to state 1
    E4                             shift and go to state 10
    E1                             shift and go to state 11
    E3                             shift and go to state 12
    E2                             shift and go to state 13

state 1

    (11) E4 -> words .

    OR              reduce using rule 11 (E4 -> words .)
    AND             reduce using rule 11 (E4 -> words .)
    $end            reduce using rule 11 (E4 -> words .)
    RPAREN          reduce using rule 11 (E4 -> words .)
    PLUS_DESCENDANTS reduce using rule 11 (E4 -> words .)
    ONLY_FIRST      reduce using rule 11 (E4 -> words .)


state 2

    (15) argument -> TYPE .

    EQ              reduce using rule 15 (argument -> TYPE .)
    NEQ             reduce using rule 15 (argument -> TYPE .)
    GEQ             reduce using rule 15 (argument -> TYPE .)
    LEQ             reduce using rule 15 (argument -> TYPE .)
    LE              reduce using rule 15 (argument -> TYPE .)
    GE              reduce using rule 15 (argument -> TYPE .)
    IN              reduce using rule 15 (argument -> TYPE .)
    CONTAINS        reduce using rule 15 (argument -> TYPE .)
    MATCHES         reduce using rule 15 (argument -> TYPE .)


state 3

    (26) words -> TEXT . words
    (26) words -> . TEXT words
    (27) words -> .

    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)

    words                          shift and go to state 14

state 4

    (12) E4 -> argument . operator words
    (17) operator -> . EQ
    (18) operator -> . NEQ
    (19) operator -> . GEQ
    (20) operator -> . LEQ
    (21) operator -> . LE
    (22) operator -> . GE
    (23) operator -> . IN
    (24) operator -> . CONTAINS
    (25) operator -> . MATCHES

    EQ              shift and go to state 23
    NEQ             shift and go to state 24
    GEQ             shift and go to state 15
    LEQ             shift and go to state 19
    LE              shift and go to state 16
    GE              shift and go to state 20
    IN              shift and go to state 21
    CONTAINS        shift and go to state 18
    MATCHES         shift and go to state 17

    operator                       shift and go to state 22

state 5

    (14) argument -> PROJECT .

    EQ              reduce using rule 14 (argument -> PROJECT .)
    NEQ             reduce using rule 14 (argument -> PROJECT .)
    GEQ             reduce using rule 14 (argument -> PROJECT .)
    LEQ             reduce using rule 14 (argument -> PROJECT .)
    LE              reduce using rule 14 (argument -> PROJECT .)
    GE              reduce using rule 14 (argument -> PROJECT .)
    IN              reduce using rule 14 (argument -> PROJECT .)
    CONTAINS        reduce using rule 14 (argument -> PROJECT .)
    MATCHES         reduce using rule 14 (argument -> PROJECT .)


state 6

    (10) E4 -> TAG .
    (13) argument -> TAG .

    OR              reduce using rule 10 (E4 -> TAG .)
    AND             reduce using rule 10 (E4 -> TAG .)
    $end            reduce using rule 10 (E4 -> TAG .)
    RPAREN          reduce using rule 10 (E4 -> TAG .)
    PLUS_DESCENDANTS reduce using rule 10 (E4 -> TAG .)
    ONLY_FIRST      reduce using rule 10 (E4 -> TAG .)
    EQ              reduce using rule 13 (argument -> TAG .)
    NEQ             reduce using rule 13 (argument -> TAG .)
    GEQ             reduce using rule 13 (argument -> TAG .)
    LEQ             reduce using rule 13 (argument -> TAG .)
    LE              reduce using rule 13 (argument -> TAG .)
    GE              reduce using rule 13 (argument -> TAG .)
    IN              reduce using rule 13 (argument -> TAG .)
    CONTAINS        reduce using rule 13 (argument -> TAG .)
    MATCHES         reduce using rule 13 (argument -> TAG .)


state 7

    (9) E3 -> LPAREN . E1 RPAREN
    (1) E1 -> . E1 AND E2
    (2) E1 -> . E2 PLUS_DESCENDANTS
    (3) E1 -> . E2 ONLY_FIRST
    (4) E1 -> . E2
    (5) E2 -> . E2 OR E3
    (6) E2 -> . E3
    (7) E3 -> . NOT E3
    (8) E3 -> . E4
    (9) E3 -> . LPAREN E1 RPAREN
    (10) E4 -> . TAG
    (11) E4 -> . words
    (12) E4 -> . argument operator words
    (26) words -> . TEXT words
    (27) words -> .
    (13) argument -> . TAG
    (14) argument -> . PROJECT
    (15) argument -> . TYPE
    (16) argument -> . UNIQUEID

    NOT             shift and go to state 9
    LPAREN          shift and go to state 7
    TAG             shift and go to state 6
    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    PROJECT         shift and go to state 5
    TYPE            shift and go to state 2
    UNIQUEID        shift and go to state 8

    argument                       shift and go to state 4
    words                          shift and go to state 1
    E4                             shift and go to state 10
    E1                             shift and go to state 25
    E3                             shift and go to state 12
    E2                             shift and go to state 13

state 8

    (16) argument -> UNIQUEID .

    EQ              reduce using rule 16 (argument -> UNIQUEID .)
    NEQ             reduce using rule 16 (argument -> UNIQUEID .)
    GEQ             reduce using rule 16 (argument -> UNIQUEID .)
    LEQ             reduce using rule 16 (argument -> UNIQUEID .)
    LE              reduce using rule 16 (argument -> UNIQUEID .)
    GE              reduce using rule 16 (argument -> UNIQUEID .)
    IN              reduce using rule 16 (argument -> UNIQUEID .)
    CONTAINS        reduce using rule 16 (argument -> UNIQUEID .)
    MATCHES         reduce using rule 16 (argument -> UNIQUEID .)


state 9

    (7) E3 -> NOT . E3
    (7) E3 -> . NOT E3
    (8) E3 -> . E4
    (9) E3 -> . LPAREN E1 RPAREN
    (10) E4 -> . TAG
    (11) E4 -> . words
    (12) E4 -> . argument operator words
    (26) words -> . TEXT words
    (27) words -> .
    (13) argument -> . TAG
    (14) argument -> . PROJECT
    (15) argument -> . TYPE
    (16) argument -> . UNIQUEID

    NOT             shift and go to state 9
    LPAREN          shift and go to state 7
    TAG             shift and go to state 6
    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)
    PROJECT         shift and go to state 5
    TYPE            shift and go to state 2
    UNIQUEID        shift and go to state 8

    argument                       shift and go to state 4
    words                          shift and go to state 1
    E4                             shift and go to state 10
    E3                             shift and go to state 26

state 10

    (8) E3 -> E4 .

    PLUS_DESCENDANTS reduce using rule 8 (E3 -> E4 .)
    ONLY_FIRST      reduce using rule 8 (E3 -> E4 .)
    OR              reduce using rule 8 (E3 -> E4 .)
    AND             reduce using rule 8 (E3 -> E4 .)
    $end            reduce using rule 8 (E3 -> E4 .)
    RPAREN          reduce using rule 8 (E3 -> E4 .)


state 11

    (0) S' -> E1 .
    (1) E1 -> E1 . AND E2

    AND             shift and go to state 27


state 12

    (6) E2 -> E3 .

    PLUS_DESCENDANTS reduce using rule 6 (E2 -> E3 .)
    ONLY_FIRST      reduce using rule 6 (E2 -> E3 .)
    OR              reduce using rule 6 (E2 -> E3 .)
    AND             reduce using rule 6 (E2 -> E3 .)
    $end            reduce using rule 6 (E2 -> E3 .)
    RPAREN          reduce using rule 6 (E2 -> E3 .)


state 13

    (2) E1 -> E2 . PLUS_DESCENDANTS
    (3) E1 -> E2 . ONLY_FIRST
    (4) E1 -> E2 .
    (5) E2 -> E2 . OR E3

    PLUS_DESCENDANTS shift and go to state 30
    ONLY_FIRST      shift and go to state 29
    RPAREN          reduce using rule 4 (E1 -> E2 .)
    AND             reduce using rule 4 (E1 -> E2 .)
    $end            reduce using rule 4 (E1 -> E2 .)
    OR              shift and go to state 28


state 14

    (26) words -> TEXT words .

    PLUS_DESCENDANTS reduce using rule 26 (words -> TEXT words .)
    ONLY_FIRST      reduce using rule 26 (words -> TEXT words .)
    OR              reduce using rule 26 (words -> TEXT words .)
    AND             reduce using rule 26 (words -> TEXT words .)
    $end            reduce using rule 26 (words -> TEXT words .)
    RPAREN          reduce using rule 26 (words -> TEXT words .)


state 15

    (19) operator -> GEQ .

    TEXT            reduce using rule 19 (operator -> GEQ .)
    PLUS_DESCENDANTS reduce using rule 19 (operator -> GEQ .)
    ONLY_FIRST      reduce using rule 19 (operator -> GEQ .)
    OR              reduce using rule 19 (operator -> GEQ .)
    AND             reduce using rule 19 (operator -> GEQ .)
    $end            reduce using rule 19 (operator -> GEQ .)
    RPAREN          reduce using rule 19 (operator -> GEQ .)


state 16

    (21) operator -> LE .

    TEXT            reduce using rule 21 (operator -> LE .)
    PLUS_DESCENDANTS reduce using rule 21 (operator -> LE .)
    ONLY_FIRST      reduce using rule 21 (operator -> LE .)
    OR              reduce using rule 21 (operator -> LE .)
    AND             reduce using rule 21 (operator -> LE .)
    $end            reduce using rule 21 (operator -> LE .)
    RPAREN          reduce using rule 21 (operator -> LE .)


state 17

    (25) operator -> MATCHES .

    TEXT            reduce using rule 25 (operator -> MATCHES .)
    PLUS_DESCENDANTS reduce using rule 25 (operator -> MATCHES .)
    ONLY_FIRST      reduce using rule 25 (operator -> MATCHES .)
    OR              reduce using rule 25 (operator -> MATCHES .)
    AND             reduce using rule 25 (operator -> MATCHES .)
    $end            reduce using rule 25 (operator -> MATCHES .)
    RPAREN          reduce using rule 25 (operator -> MATCHES .)


state 18

    (24) operator -> CONTAINS .

    TEXT            reduce using rule 24 (operator -> CONTAINS .)
    PLUS_DESCENDANTS reduce using rule 24 (operator -> CONTAINS .)
    ONLY_FIRST      reduce using rule 24 (operator -> CONTAINS .)
    OR              reduce using rule 24 (operator -> CONTAINS .)
    AND             reduce using rule 24 (operator -> CONTAINS .)
    $end            reduce using rule 24 (operator -> CONTAINS .)
    RPAREN          reduce using rule 24 (operator -> CONTAINS .)


state 19

    (20) operator -> LEQ .

    TEXT            reduce using rule 20 (operator -> LEQ .)
    PLUS_DESCENDANTS reduce using rule 20 (operator -> LEQ .)
    ONLY_FIRST      reduce using rule 20 (operator -> LEQ .)
    OR              reduce using rule 20 (operator -> LEQ .)
    AND             reduce using rule 20 (operator -> LEQ .)
    $end            reduce using rule 20 (operator -> LEQ .)
    RPAREN          reduce using rule 20 (operator -> LEQ .)


state 20

    (22) operator -> GE .

    TEXT            reduce using rule 22 (operator -> GE .)
    PLUS_DESCENDANTS reduce using rule 22 (operator -> GE .)
    ONLY_FIRST      reduce using rule 22 (operator -> GE .)
    OR              reduce using rule 22 (operator -> GE .)
    AND             reduce using rule 22 (operator -> GE .)
    $end            reduce using rule 22 (operator -> GE .)
    RPAREN          reduce using rule 22 (operator -> GE .)


state 21

    (23) operator -> IN .

    TEXT            reduce using rule 23 (operator -> IN .)
    PLUS_DESCENDANTS reduce using rule 23 (operator -> IN .)
    ONLY_FIRST      reduce using rule 23 (operator -> IN .)
    OR              reduce using rule 23 (operator -> IN .)
    AND             reduce using rule 23 (operator -> IN .)
    $end            reduce using rule 23 (operator -> IN .)
    RPAREN          reduce using rule 23 (operator -> IN .)


state 22

    (12) E4 -> argument operator . words
    (26) words -> . TEXT words
    (27) words -> .

    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)

    words                          shift and go to state 31

state 23

    (17) operator -> EQ .

    TEXT            reduce using rule 17 (operator -> EQ .)
    PLUS_DESCENDANTS reduce using rule 17 (operator -> EQ .)
    ONLY_FIRST      reduce using rule 17 (operator -> EQ .)
    OR              reduce using rule 17 (operator -> EQ .)
    AND             reduce using rule 17 (operator -> EQ .)
    $end            reduce using rule 17 (operator -> EQ .)
    RPAREN          reduce using rule 17 (operator -> EQ .)


state 24

    (18) operator -> NEQ .

    TEXT            reduce using rule 18 (operator -> NEQ .)
    PLUS_DESCENDANTS reduce using rule 18 (operator -> NEQ .)
    ONLY_FIRST      reduce using rule 18 (operator -> NEQ .)
    OR              reduce using rule 18 (operator -> NEQ .)
    AND             reduce using rule 18 (operator -> NEQ .)
    $end            reduce using rule 18 (operator -> NEQ .)
    RPAREN          reduce using rule 18 (operator -> NEQ .)


state 25

    (9) E3 -> LPAREN E1 . RPAREN
    (1) E1 -> E1 . AND E2

    RPAREN          shift and go to state 32
    AND             shift and go to state 27


state 26

    (7) E3 -> NOT E3 .

    PLUS_DESCENDANTS reduce using rule 7 (E3 -> NOT E3 .)
    ONLY_FIRST      reduce using rule 7 (E3 -> NOT E3 .)
    OR              reduce using rule 7 (E3 -> NOT E3 .)
    AND             reduce using rule 7 (E3 -> NOT E3 .)
    $end            reduce using rule 7 (E3 -> NOT E3 .)
    RPAREN          reduce using rule 7 (E3 -> NOT E3 .)


state 27

    (1) E1 -> E1 AND . E2
    (5) E2 -> . E2 OR E3
    (6) E2 -> . E3
    (7) E3 -> . NOT E3
    (8) E3 -> . E4
    (9) E3 -> . LPAREN E1 RPAREN
    (10) E4 -> . TAG
    (11) E4 -> . words
    (12) E4 -> . argument operator words
    (26) words -> . TEXT words
    (27) words -> .
    (13) argument -> . TAG
    (14) argument -> . PROJECT
    (15) argument -> . TYPE
    (16) argument -> . UNIQUEID

    NOT             shift and go to state 9
    LPAREN          shift and go to state 7
    TAG             shift and go to state 6
    TEXT            shift and go to state 3
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)
    PROJECT         shift and go to state 5
    TYPE            shift and go to state 2
    UNIQUEID        shift and go to state 8

    argument                       shift and go to state 4
    words                          shift and go to state 1
    E4                             shift and go to state 10
    E3                             shift and go to state 12
    E2                             shift and go to state 33

state 28

    (5) E2 -> E2 OR . E3
    (7) E3 -> . NOT E3
    (8) E3 -> . E4
    (9) E3 -> . LPAREN E1 RPAREN
    (10) E4 -> . TAG
    (11) E4 -> . words
    (12) E4 -> . argument operator words
    (26) words -> . TEXT words
    (27) words -> .
    (13) argument -> . TAG
    (14) argument -> . PROJECT
    (15) argument -> . TYPE
    (16) argument -> . UNIQUEID

    NOT             shift and go to state 9
    LPAREN          shift and go to state 7
    TAG             shift and go to state 6
    TEXT            shift and go to state 3
    PLUS_DESCENDANTS reduce using rule 27 (words -> .)
    ONLY_FIRST      reduce using rule 27 (words -> .)
    OR              reduce using rule 27 (words -> .)
    AND             reduce using rule 27 (words -> .)
    $end            reduce using rule 27 (words -> .)
    RPAREN          reduce using rule 27 (words -> .)
    PROJECT         shift and go to state 5
    TYPE            shift and go to state 2
    UNIQUEID        shift and go to state 8

    argument                       shift and go to state 4
    words                          shift and go to state 1
    E4                             shift and go to state 10
    E3                             shift and go to state 34

state 29

    (3) E1 -> E2 ONLY_FIRST .

    RPAREN          reduce using rule 3 (E1 -> E2 ONLY_FIRST .)
    AND             reduce using rule 3 (E1 -> E2 ONLY_FIRST .)
    $end            reduce using rule 3 (E1 -> E2 ONLY_FIRST .)


state 30

    (2) E1 -> E2 PLUS_DESCENDANTS .

    RPAREN          reduce using rule 2 (E1 -> E2 PLUS_DESCENDANTS .)
    AND             reduce using rule 2 (E1 -> E2 PLUS_DESCENDANTS .)
    $end            reduce using rule 2 (E1 -> E2 PLUS_DESCENDANTS .)


state 31

    (12) E4 -> argument operator words .

    OR              reduce using rule 12 (E4 -> argument operator words .)
    AND             reduce using rule 12 (E4 -> argument operator words .)
    $end            reduce using rule 12 (E4 -> argument operator words .)
    RPAREN          reduce using rule 12 (E4 -> argument operator words .)
    PLUS_DESCENDANTS reduce using rule 12 (E4 -> argument operator words .)
    ONLY_FIRST      reduce using rule 12 (E4 -> argument operator words .)


state 32

    (9) E3 -> LPAREN E1 RPAREN .

    PLUS_DESCENDANTS reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)
    ONLY_FIRST      reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)
    OR              reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)
    AND             reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)
    $end            reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 9 (E3 -> LPAREN E1 RPAREN .)


state 33

    (1) E1 -> E1 AND E2 .
    (5) E2 -> E2 . OR E3

    RPAREN          reduce using rule 1 (E1 -> E1 AND E2 .)
    AND             reduce using rule 1 (E1 -> E1 AND E2 .)
    $end            reduce using rule 1 (E1 -> E1 AND E2 .)
    OR              shift and go to state 28


state 34

    (5) E2 -> E2 OR E3 .

    PLUS_DESCENDANTS reduce using rule 5 (E2 -> E2 OR E3 .)
    ONLY_FIRST      reduce using rule 5 (E2 -> E2 OR E3 .)
    OR              reduce using rule 5 (E2 -> E2 OR E3 .)
    AND             reduce using rule 5 (E2 -> E2 OR E3 .)
    $end            reduce using rule 5 (E2 -> E2 OR E3 .)
    RPAREN          reduce using rule 5 (E2 -> E2 OR E3 .)

